import numpy as np
import os

dir = os.getcwd() + "\\assignment\\assignment_01\\"

# Load the data.
data = np.loadtxt(dir + "train_data.csv",
                  delimiter=",",
                  skiprows=1)

"""

x = data[:, 0]
y = data[:, 1]

def make_linear_function(s_idx, e_idx, deg=3):
    x_hat = x[s_idx : e_idx]
    y_hat = y[s_idx : e_idx]
    return np.polyfit(x_hat, y_hat, deg)

def transformation(a, x, y):
    b = -2.0 * a * x
    c = y + ((b ** 2) / (4.0 * a))
    return [a, b, c]

def make_function(a, b, p):
    n = [p]
    p = np.array([a[1] - p * (a[0] ** 2), b[1]- p * (b[0] ** 2)])
    q = np.array([[a[0], 1], [b[0], 1]])
    n = np.append(n, np.dot(np.linalg.inv(q), p))
    return n

def culculation(n):
    a = n[0]
    x = (-1.0 * n[1]) / (2.0 * n[0])
    y = -1.0 * (((n[1] ** 2) - 4.0 * n[0] * n[2]) / (4.0 * n[0]))
    return [a, x, y]

print(np.polyfit(x, y, 3))

print(make_linear_function(0,3,1), end=',\n')    # 3
print(make_linear_function(2,13), end=',\n')   # 1
print(make_linear_function(14,20), end=',\n')  # 2
print(make_linear_function(19,25), end=',\n')  # 3
print(make_linear_function(25,35), end=',\n')  # 1
print(make_linear_function(36,44), end=',\n')  # 2
print(make_linear_function(44,52), end=',\n')  # 3
print(make_linear_function(51,61), end=',\n')  # 1
print(make_linear_function(60,70), end=',\n')  # 2
print(make_linear_function(69,76), end=',\n')  # 3
print(make_linear_function(75,87), end=',\n')  # 1
print(make_linear_function(85,94), end=',\n')  # 2
print(make_linear_function(92,100), end=',\n') # 3
print(make_linear_function(98,115), end=',\n')  # 1
print(make_linear_function(110,122), end=',\n')  # 2
print(make_linear_function(118,127), end=',\n')  # 3
print(make_linear_function(125,137), end=',\n')  # 1

print()

l = []

print(make_linear_function(0,3,1), end=',\n')    # 3
print(make_linear_function(2,20), end=',\n')   # 1
print(make_linear_function(19,25), end=',\n')  # 3
print(make_linear_function(25,44), end=',\n')  # 1
print(make_linear_function(44,52), end=',\n')  # 3
print(make_linear_function(51,70), end=',\n')  # 1
print(make_linear_function(69,76), end=',\n')  # 3
print(make_linear_function(75,94), end=',\n')  # 1
print(make_linear_function(92,100), end=',\n') # 3
print(make_linear_function(98,122), end=',\n')  # 1
print(make_linear_function(118,127), end=',\n')  # 3
print(make_linear_function(125,141), end=',\n')  # 1

print()


l.append(transformation(-0.9, 75.0, 165.0))     # 2
l.append(transformation(0.6, 75.0, 158.0))      # 3
l.append(transformation(-0.65, 83.0, 190.0))    # 1
l.append(transformation(-1.2, 87.0, 220.0))     # 2
l.append(transformation(0.5, 89.0, 210.0))      # 3
l.append(transformation(-0.65, 96.0, 250.0))    # 1
l.append(transformation(-1.0, 99.0, 264.0))     # 2
l.append(transformation(0.6, 101.0, 258.0))      # 3

for i in l:
    print(i,end=',\n')

print()

l = []

l.append(make_function([70.927, 150.496], [74, 170], -0.85))     # 2
l.append(make_function([74, 170], [77, 167], 0.6))              # 3
l.append(make_function([77, 167], [81, 200], -0.65))            # 1
l.append(make_function([81, 200], [86.5, 225], -1.2))           # 2
l.append(make_function([86.5, 225], [89.5, 220], 0.5))          # 3
l.append(make_function([89.5, 220], [93.5, 260], -0.65))        # 1
l.append(make_function([93.5, 260], [99, 290], -1.0))           # 2
l.append(make_function([99, 290], [102, 300], 0.6))             # 3

for i in l:
    print(i,end=',\n')

print()

l = [[-8.50000000e-01,  1.29534842e+02, -4.76097833e+03],
[ 6.0000e-01, -9.1600e+01,  3.6628e+03],
[-6.5000e-01,  1.1095e+02, -4.5223e+03],
[-1.20000000e+00,  2.05545455e+02, -8.57598182e+03],
[ 5.00000000e-01, -8.96666667e+01,  4.24004167e+03],
[-6.5000000e-01,  1.2895000e+02, -6.1143625e+03],
[-1.00000000e+00,  1.97954545e+02, -9.50650000e+03],
[ 6.00000000e-01, -1.17266667e+02,  6.01880000e+03]]

for i in l:
    print(culculation(i), end=',\n')

print()

l = [
[-0.85, 76.19696588235294, 174.10263822498993],
[0.6, 76.33333333333333, 160],
[-0.65, 85.34615384615384, 212.27788461538412],
[-1.2, 85.64393958333334, 218],
[0.5, 89.6666667, 210],
[-0.65, 99.19230769230768, 281.0615384615371],
[-1.0, 98.9772725, 286],
[0.6, 97.7222225, 285],
]

for i in l:
    print(transformation(i[0], i[1], i[2]),end=',\n')

print()

l = [
[68.92230576441102,140.07046441544387],
[69.4235588972431,142.90837835324936],
[69.92481203007519,144.45719934910147],
[70.42606516290726,147.5345047084495],
[70.92731829573934,150.4965244561726],
[74, 170],      # 2->3
[77, 167],      # 3->1
[81, 210],      # 1->2
[86.5, 220],    # 2->3
[89.5, 240],    # 3->1
[93.5, 270],    # 1->2
[99, 290],      # 2->3
[101, 305]      # 3->1
]

l = np.array(l)

x = l[:,0]
y = l[:,1]

print(np.polyfit(x, y, 7), end=',\n')

print()

test_data = [
[1.2531328320802004,-13.585126570883869],
[1.7543859649122806,-14.835843459708817],
[2.2556390977443606,-15.703351869377082],
[2.756892230576441,-13.593599504173627],
[3.258145363408521,-10.203358091826237],
[3.7593984962406015,-6.276665167706884],
[4.260651629072681,-8.693404125927424],
[4.761904761904762,-5.4210052860801134],
[5.263157894736842,-7.468286057466775],
[5.764411027568922,-3.359994211871819],
[6.265664160401002,-6.3144846833232595],
[6.7669172932330826,-5.1912196108778055],
[7.268170426065162,-4.89984722267217],
[7.769423558897243,-8.266361501528184],
[8.270676691729323,-4.168457428915068],
[8.771929824561402,0.044142078840917476],
[9.273182957393484,-0.8428805227831988],
[9.774436090225564,4.83427481096968],
[10.275689223057643,4.332933182249585],
[10.776942355889723,4.395460660667515],
[11.278195488721805,0.34678586060811756],
[11.779448621553884,-2.384900705021724],
[12.280701754385964,-7.125327313311187],
[12.781954887218044,-10.841368838946492],
[13.283208020050125,-12.540918985115576],
[13.784461152882205,-12.60412206710894],
[14.285714285714285,-10.527994887512037],
[14.786967418546364,-9.624772278922725],
[15.288220551378446,-5.962322167498037],
[15.789473684210526,-0.5668634986492096],
[16.290726817042607,-1.1769205325545675],
[16.791979949874687,3.0497777241170216],
[17.293233082706767,4.151558371871871],
[17.794486215538846,3.3667054070866103],
[18.295739348370926,5.858347435623813],
[18.796992481203006,4.994054845728142],
[19.298245614035086,1.6148977237363806],
[19.799498746867165,6.2022298214870615],
[20.30075187969925,7.719805046670219],
[20.80200501253133,9.07483514205838],
[21.303258145363408,13.012276029671137],
[21.804511278195488,14.11449209635412],
[22.305764411027567,14.09342819674644],
[22.807017543859647,14.057072733260327],
[23.308270676691727,15.537777888898923],
[23.809523809523807,12.811017790455232],
[24.31077694235589,13.442591025214545],
[24.81203007518797,11.0303288461221],
[25.31328320802005,7.6446581222029515],
[25.81453634085213,6.769333703724332],
[26.31578947368421,4.297403004397651],
[26.81704260651629,1.029043543439636],
[27.31829573934837,9.18362933350392],
[27.819548872180448,6.960542707302652],
[28.32080200501253,13.265747884718413],
[28.82205513784461,23.64440569072988],
[29.32330827067669,19.573876262064953],
[29.82456140350877,19.875265333611846],
[30.32581453634085,22.967962758664317],
[30.82706766917293,26.144270281078107],
[31.32832080200501,23.93364272703629],
[31.82957393483709,25.72978817506852],
[32.33082706766917,25.49272823840052],
[32.83208020050125,28.074731782217956],
[33.33333333333333,31.717308234783047],
[33.83458646616541,34.335428908674096],
[34.335839598997495,37.20191827263918],
[34.83709273182957,39.72359910075713],
[35.338345864661655,40.126309825166466],
[35.83959899749373,41.55890040439935],
[36.340852130325814,36.68438489669557],
[36.84210526315789,37.296422074255176],
[37.34335839598997,31.6257837076409],
[37.84461152882205,31.1917971282061],
[38.34586466165413,29.309448105380643],
[38.847117794486216,27.899441476292964],
[39.34837092731829,32.457568244485685],
[39.849624060150376,34.85506174197769],
[40.35087719298245,41.726452639426164],
[40.852130325814535,43.15125949680668],
[41.35338345864661,46.88340112059206],
[41.854636591478695,48.12361122775094],
[42.35588972431078,50.04893144543469],
[42.857142857142854,53.42590912472464],
[43.35839598997494,55.060939666334406],
[43.859649122807014,52.32365118492776],
[44.3609022556391,54.851041443536026],
[44.86215538847117,54.53388915183723],
[45.363408521303256,57.89027826868822],
[45.86466165413533,63.041105772654994],
[46.365914786967416,66.04425872608549],
[46.8671679197995,66.4269762743911],
[47.368421052631575,73.40222536487026],
[47.86967418546366,76.18294674859914],
[48.370927318295735,73.81751678810615],
[48.87218045112782,73.95174448465279],
[49.373433583959894,73.08960805763347],
[49.87468671679198,70.16034582312975],
[50.37593984962406,62.95947126439767],
[50.87719298245614,63.784714490640546],
[51.37844611528822,65.29142609662782],
[51.879699248120296,68.72774308650534],
[52.38095238095238,68.59297230649142],
[52.882205513784456,73.69213868617994],
[53.38345864661654,82.06421672514594],
[53.884711779448615,83.75659810651607],
[54.3859649122807,83.65205231653131],
[54.88721804511278,88.39721121024395],
[55.38847117794486,93.32732260993967],
[55.88972431077694,91.47521116790766],
[56.39097744360902,94.70780982570334],
[56.8922305764411,92.64715823061096],
[57.39348370927318,97.19968194952047],
[57.89473684210526,97.68925411975623],
[58.39598997493734,100.3140493950892],
[58.89724310776942,107.61536733537675],
[59.3984962406015,104.65331145372849],
[59.89974937343358,110.9950590812261],
[60.40100250626566,117.98759799694673],
[60.90225563909774,114.84592183466447],
[61.40350877192982,115.65136543217196],
[61.9047619047619,117.7783283452736],
[62.40601503759398,112.1415193283534],
[62.907268170426065,112.87781956554251],
[63.40852130325814,110.65623558820401],
[63.909774436090224,110.4257002425031],
[64.41102756892231,110.0894285872276],
[64.91228070175438,115.33400761541591],
[65.41353383458646,121.42066831321482],
[65.91478696741854,127.87357895768176],
[66.41604010025063,131.49617295565758],
[66.9172932330827,132.28281218565877],
[67.41854636591478,135.638789963362],
[67.91979949874687,139.8014247891127],
[68.42105263157895,141.01146794904952],
[68.92230576441102,140.07046441544387],
[69.4235588972431,142.90837835324936],
[69.92481203007519,144.45719934910147],
[70.42606516290726,147.5345047084495],
[70.92731829573934,150.4965244561726],
]

def make_linear_function2(idx):
    p = test_data[idx - 1]
    q = test_data[idx]
    a = np.array([[p[0], 1], [q[0], 1]])
    b = [p[1], q[1]]
    n = np.dot(np.linalg.inv(a), b)
    return n

for i in range(1, len(test_data)):
    a = make_linear_function2(i)
    print(f"[{a[0]}, {a[1]}],")
    pass

'''

l = np.array([
[94.99749373433582, 272.38097435401596],
[95.4987468671679, 278.1500112850231],
[95.99999999999997, 284.8453380526019],
[96.50125313283205, 291.9435397615155],
[97.00250626566414, 295.92839315928893],
[97.50375939849621, 296.7936963122903],
[98.00501253132829, 300.4852718677638],
[98.50626566416038, 305.0641701760896],
[99.00751879699246, 306.3952176520201],
[99.50877192982453, 305.3601137650539],
[100.01002506265661, 308.4818190966399],
[100.5112781954887, 310.18552219207726],
[101.01253132832078, 313.57055808736004],
[101.51378446115285, 316.8287798098555],
])

a = np.array([0, 0])
b = np.array([93.98496240601501, 242.18295046106084])

l = l - a

for i in l:
    print(f"[{i[0]}, {i[1]}],")


'''
'''

l = np.array([
[94.98746867167918, 255.51723700427908],
[95.48872180451124, 252.37556084199682],
[95.98997493734333, 253.1810044395043],
[96.49122807017541, 255.30796735260594],
[96.99248120300749, 249.67115833568573],
[97.49373433583958, 250.40745857287487],
[97.99498746867165, 248.18587459553635],
[98.49624060150373, 247.95533924983545],
[98.99749373433582, 247.61906759455997],
[99.4987468671679, 252.86364662274826],
[99.99999999999997, 258.95030732054715],
[100.50125313283205, 265.4032179650141],
[101.00250626566414, 269.0258119629899],
[101.50375939849621, 269.81245119299115],
[102.00501253132829, 273.1684289706943],
[102.50626566416038, 277.33106379644505],
[103.00751879699246, 278.5411069563819],
[103.50877192982453, 277.6001034227762],
[104.01002506265661, 280.43801736058174],
[104.5112781954887, 281.98683835643385],
[105.01253132832078, 285.0641437157818],
[105.51378446115285, 288.026163463505]
])

a = np.array([1.0, 1.135])

l = l * a

for i in l:
    print(f"[{i[0]}, {i[1]}],")

'''

"""



from scipy.optimize import curve_fit
from regression import func, func2, func3, func4

x = data[:, 0]
y = data[:, 1]



'''
def quadratic_model1(x, a, b, c):
    return a * x ** 2 + b * x + c

def quadratic_model2(x, a, b, c, d, e):
    return a * np.exp(b * x + c) + d * x + e

params, covariance = curve_fit(quadratic_model2, x, y, maxfev=100000)

# print(f"{params[0]} * x ** 2 + {params[1]} * x + {params[2]}")
print(f"{params[0]} * np.exp({params[1]} * x + {params[2]}) + {params[3]} * x + {params[4]}") 
'''

def quadratic_model(x, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o):
    return a * x ** 2 + b * x + c + d * np.sin(e * x + f) + g * np.sin(h * x + i) + j * np.sin(k * x + l) + m * np.sin(n * x + o) 

params, covariance = curve_fit(quadratic_model, x, y, [0.029565943435839646, 0.1378579815628654, -9.654010240351456, -5.892426664318304, 0.5000054698264715, 0.48003462287003157, -4.785135902940669, 2 * 0.5000054698264715, 0.48003462287003157, 0.33748801526606803, 4 * 0.5000054698264715, 0.6888970464338859, 0.5573537057993518, 8 * 0.5000054698264715, -2.631462677359398], maxfev=100000)

print(f"{params[0]} * x ** 2 + {params[1]} * x + {params[2]} + {params[3]} * np.sin({params[4]} * x + {params[5]}) + {params[6]} * np.sin({params[7]} * x + {params[8]}) + {params[9]} * np.sin({params[10]} * x + {params[11]}) + {params[12]} * np.sin({params[13]} * x + {params[14]}) ")

'''
def quadratic_model(x, a, b, c, d, e, f, g, h, i):
    return a * x ** 2 + b * x + c + d * np.sin(e * x + f) + g * np.sin(h * x + i) 

params, covariance = curve_fit(quadratic_model, x, y, [0.029565943435839646, 0.1378579815628654, -9.654010240351456, -5.892426664318304, 0.5000054698264715, 0.48003462287003157, -4.785135902940669, 2 * 0.5000054698264715, 0.48003462287003157], maxfev=100000)

print(f"{params[0]} * x ** 2 + {params[1]} * x + {params[2]} + {params[3]} * np.sin({params[4]} * x + {params[5]}) + {params[6]} * np.sin({params[7]} * x + {params[8]})")
'''